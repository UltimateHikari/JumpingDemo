#version 330 core

out vec4 color;
in vec3 fNormal;
in vec3 fPosition;
in vec2 fTexCoords;

struct Material{
	sampler2D texture_diffuse1;
	vec3 specular;
	float shininess;
};

struct Light{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float constant;
	float lin;
	float quad;
};

uniform sampler2D texture_diffuse1;
uniform Light light;
uniform Material material;
uniform vec3 viewPosition;

void main(){
	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, fTexCoords));
		//diffuse
	vec3 lightDirection = normalize(light.position - fPosition);
	vec3 normal = normalize(fNormal);
	float diff = max(dot(normal,lightDirection),0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, fTexCoords));
		//specular
	vec3 viewDirection = normalize(viewPosition - fPosition);
	vec3 reflectDirection = reflect(-lightDirection, normal);
	float spec = pow(max(dot(viewDirection, reflectDirection), 0.0),material.shininess);
	vec3 specular = light.specular * (spec * material.specular);

	float distance = length(light.position - fPosition);
	float attenuation = 1.0/(light.constant + light.lin*distance + light.quad*(distance*distance));

	color = vec4((ambient + diffuse + specular)*attenuation,1.0);
}