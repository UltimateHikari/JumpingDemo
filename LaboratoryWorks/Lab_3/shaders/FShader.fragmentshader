#version 330 core

out vec4 color;
in vec3 fNormal;
in vec3 fPosition;
in vec2 fTexCoords;

uniform sampler2D texture_diffuse1;
uniform vec3 lightPosition;
uniform vec3 viewPosition;

void main(){
		//ambient
	float ambientIntensity = 0.1;
	vec3 lightColor = vec3(1.0,1.0,1.0);
	vec3 ambient = ambientIntensity*lightColor;
		//diffuse
	vec3 lightDirection = normalize(lightPosition - fPosition);
	vec3 normal = normalize(fNormal);
	float diff = max(dot(normal,lightDirection),0.0);
	vec3 diffuse = diff*lightColor;
		//specular
	float specularIntensity = 0.5;
	vec3 viewDirection = normalize(viewPosition - fPosition);
	vec3 reflectDirection = reflect(-lightDirection, normal);
	float spec = pow(max(dot(viewDirection, reflectDirection), 0.0),32);
	vec3 specular = specularIntensity*spec*lightColor;

	color = texture(texture_diffuse1, fTexCoords)*vec4(ambient + diffuse + specular,1.0);
}